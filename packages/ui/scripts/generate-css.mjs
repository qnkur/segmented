// packages/ui/scripts/generate-css.mjs
import fs from "fs"
import path from "path"
import { fileURLToPath } from "url"
import process from "node:process" // FIX 1: Import 'process' to resolve the ESLint error.

// This is a more robust way to find the root of the 'ui' package
const __dirname = path.dirname(fileURLToPath(import.meta.url))
const packageRoot = path.resolve(__dirname, "..")

async function generateCss() {
  console.log("ðŸ”µ Reading font configuration...")
  // Dynamically import the config file with a cache-busting timestamp
  const { fontConfig } = await import(
    path.resolve(packageRoot, "fonts.config.mjs") + `?t=${Date.now()}`
  )

  if (!fontConfig || Object.keys(fontConfig).length === 0) {
    console.error(
      "ðŸ”´ ERROR: fontConfig is empty or not found. Cannot generate CSS."
    )
    process.exit(1) // Exit with an error code
  }
  console.log("ðŸŸ¢ Font configuration loaded successfully.")

  let css = `/* DO NOT EDIT. This file is auto-generated by a build script. */\n\n`
  for (const fontFamily in fontConfig) {
    const variants = fontConfig[fontFamily]
    if (variants) {
      for (const variant of variants) {
        // FIX 2: Correctly format the URL using a template literal string
        const subDir = fontFamily.includes("DSEG7")
          ? "DSEG7"
          : fontFamily.includes("DSEG14")
            ? "DSEG14"
            : fontFamily

        const url = `/fonts/${subDir}/${variant.file}`

        // FIX 3: Correctly format the @font-face block with template literals
        css += `
@font-face {
  font-family: '${fontFamily}';
  font-style: ${variant.style};
  font-weight: ${variant.weight};
  src: url('${url}') format('woff2');
  font-display: swap;
}
`
      }
    }
  }

  console.log(`ðŸ”µ Generated CSS content of length: ${css.length}`)

  const outputPath = path.resolve(packageRoot, "dist", "fonts.css")
  console.log(`ðŸ”µ Writing CSS to: ${outputPath}`)

  fs.mkdirSync(path.dirname(outputPath), { recursive: true })
  fs.writeFileSync(outputPath, css)

  console.log("âœ… Generated fonts.css successfully!")
}

generateCss().catch((err) => {
  console.error("ðŸ”´ FAILED to generate CSS:", err)
  process.exit(1)
})
